# export abundance counts
write.csv(txi$abundance, file = file.path(results.dir, "complete_dataset_txi.csv"))
# Create DESeq dataset
dds <- DESeqDataSetFromTximport(txi,
colData = sample_key,
design = ~code_name)
head(dds)
nrow(dds)
# Filter out rows with no counts
dds <- dds[rowSums(counts(dds)) > 1, ]
nrow(dds)
# Account for transcript length
dds <- DESeq2::estimateSizeFactors(dds)
ddscounts <- DESeq2::counts(dds, normalized = TRUE)
# Save output file:
write.csv(ddscounts, file = file.path(results.dir, "complete-dataset_DESeq2-normalized-counts.csv"))
# Save dds object
saveRDS(dds, file = file.path(results.dir, 'dds_all.rds'))
# Make separate sample_keys for each subset
mut_key <- dplyr::filter(sample_key, Inject %in% c('PBS','Styphimurium','SEnt',
'PBS+PMNs', 'Styphimurium+PMNs'))
# Make separate sample_keys for each subset
alt_key <- dplyr::filter(sample_key, Inject %in% c('PBS','STM','SE',
'PBS+PMNs', 'STM+PMNs', 'SE+PMNs'))
# Make separate sample_keys for each subset
alt_key <- dplyr::filter(sample_key, code_name %in% c('PBS','STM','SE',
'PBS+PMNs', 'STM+PMNs', 'SE+PMNs'))
# Vector of samples used in the tximport
txiSamples <- as.vector(unique(alt_key$code_name))
txiSamples
# Set up path to read files into tximport
files <- file.path(dir, alt_key$filename, 'abundance.h5')
txiSamples
# Set up path to read files into tximport
files <- file.path(dir, alt_key$filename, 'abundance.h5')
# Add sample IDs to files
names(files) <- sample_key$Description
files
# Set up path to read files into tximport
files <- file.path(dir, alt_key$file_name, 'abundance.h5')
# Add sample IDs to files
names(files) <- alt_key$short_name
files
#+ tximport, cache=T
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# export abundance counts
write.csv(txi$abundance, file = file.path(results.dir, "no_controls_txi.csv"))
# Create DESeq dataset
dds <- DESeqDataSetFromTximport(txi,
colData = alt_key,
design = ~code_name)
#' Now we'll eliminate all the genes that have zero counts across all conditions.
# Filter out rows with no counts
dds <- dds[rowSums(counts(dds)) > 1, ]
# Account for transcript length
dds <- DESeq2::estimateSizeFactors(dds)
ddscounts <- DESeq2::counts(dds, normalized = TRUE)
# Save output file:
write.csv(ddscounts, file = file.path(results.dir, "no_controls_DESeq2-normalized-counts.csv"))
# Save dds object
saveRDS(dds, file = file.path(results.dir, 'dds_no_controls'))
#' ## Libraries and directories
# #+ load_pkgs, error=T
library(DESeq2)
library(ggplot2)
library(here)
library(knitr)
library(magrittr)
library(rmarkdown)
source(here("src/ggplot2-themes.R"))
#+ set_cache_dir, include=F
# Set a directory for all cache files to go
dir.create(here('results/DESeq2/src_html_output/knitr_cache'))
opts_chunk$set(cache.path = here('results/DESeq2/src_html_output/knitr_cache/'))
results.dir <- here('results/DESeq2/')
# Create new directories
dir.create(here('img/'))
dds <- readRDS(here('results/DESeq2/dds_all.rds'))
#+ rlog, cache=T
rld <- rlog(dds, blind = FALSE)
# Compare before and after transformation
head(assay(dds)[,1:4], 3) ; head(assay(rld)[,1:4], 3)
# Save the rlog transformed data
saveRDS(rld, file = file.path(results.dir, 'rld_all.rds'))
# Load the rlog transformed data
rld <- readRDS(here('results/DESeq2/rld_all.rds'))
colData(rld)
# Set order of injection
unique(colData(rld)$code_name)
colData(rld)$Inject <- colData(rld)$code_name #%>%
#+ pcaplot
# PCA plot (use just only for PC variance estimates)
pca <- plotPCA(rld, intgroup = c('code_name','Inject','hr'))
# Get PCA data
pca.df <- plotPCA(rld, intgroup = c('code_name', 'Inject', 'hr'), returnData = TRUE)
# Make plot
pca_plot <- function(input){
ggplot(data = input, aes(x = PC1, y = PC2))+
geom_point(shape = 21, stroke = 1.5,
aes(fill = as.factor(Inject),
color = as.factor(hr)),
size = 6) +
theme1 +
#scale_y_continuous(limits = c(-25,25), breaks = seq(-25, 25, by = 10)) +
scale_fill_brewer(palette = "Set1", name = 'Injection') +
#scale_color_brewer(palette = "Set2", name = 'Time', direction = 1) +
scale_color_manual(values=c("black"), name = 'Time (hr)')+
theme(legend.position = "right") +
geom_hline(yintercept = 0,
size = 1, linetype = "dashed", color = "grey70") +
geom_vline(xintercept = 0,
size = 1, linetype = "dashed", color = "grey70") +
coord_fixed(ratio = 1) +
xlab(pca$labels$x) + #pull variance estimates from al. plotPCA call
ylab(pca$labels$y) +
# Move y axis
theme(axis.title.y = element_text(margin = margin(t = 0, r = 1,
b = 0, l = 0))) +
# Move x axis
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0,
b = 0, l = 0)))+
# Shrink axis labels down
theme(plot.caption = element_text(vjust = 1),
axis.title = element_text(size = 24),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 30))
}
p <- pca_plot(pca.df)
p
colData(rld)
# Set order of injection
unique(colData(rld)$code_name)
colData(rld)$Inject <- colData(rld)$code_name %>%
gsub(pattern = '+PMNs', replacement = '', x = .)
colData(rld)$Inject
colData(rld)$Inject <- colData(rld)$code_name %>%
gsub(pattern = '\\+PMNs', replacement = '', x = .)
colData(rld)$Inject
#+ pcaplot
# PCA plot (use just only for PC variance estimates)
pca <- plotPCA(rld, intgroup = c('code_name','Inject','PMN'))
# Get PCA data
pca.df <- plotPCA(rld, intgroup = c('code_name', 'Inject', 'PMN'), returnData = TRUE)
# Make plot
pca_plot <- function(input){
ggplot(data = input, aes(x = PC1, y = PC2))+
geom_point(shape = 21, stroke = 1.5,
aes(fill = as.factor(Inject),
color = as.factor(PMN)),
size = 6) +
theme1 +
#scale_y_continuous(limits = c(-25,25), breaks = seq(-25, 25, by = 10)) +
scale_fill_brewer(palette = "Set1", name = 'Injection') +
#scale_color_brewer(palette = "Set2", name = 'Time', direction = 1) +
scale_color_manual(values=c("black"), name = 'Time (hr)')+
theme(legend.position = "right") +
geom_hline(yintercept = 0,
size = 1, linetype = "dashed", color = "grey70") +
geom_vline(xintercept = 0,
size = 1, linetype = "dashed", color = "grey70") +
coord_fixed(ratio = 1) +
xlab(pca$labels$x) + #pull variance estimates from al. plotPCA call
ylab(pca$labels$y) +
# Move y axis
theme(axis.title.y = element_text(margin = margin(t = 0, r = 1,
b = 0, l = 0))) +
# Move x axis
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0,
b = 0, l = 0)))+
# Shrink axis labels down
theme(plot.caption = element_text(vjust = 1),
axis.title = element_text(size = 24),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 30))
}
p <- pca_plot(pca.df)
p
# Make plot
pca_plot <- function(input){
ggplot(data = input, aes(x = PC1, y = PC2))+
geom_point(shape = 21, stroke = 1.5,
aes(fill = as.factor(Inject),
color = as.factor(PMN)),
size = 6) +
theme1 +
#scale_y_continuous(limits = c(-25,25), breaks = seq(-25, 25, by = 10)) +
scale_fill_brewer(palette = "Set1", name = 'Injection') +
#scale_color_brewer(palette = "Set2", name = 'Time', direction = 1) +
scale_color_manual(values=c("black", 'gray'), name = 'Time (hr)')+
theme(legend.position = "right") +
geom_hline(yintercept = 0,
size = 1, linetype = "dashed", color = "grey70") +
geom_vline(xintercept = 0,
size = 1, linetype = "dashed", color = "grey70") +
coord_fixed(ratio = 1) +
xlab(pca$labels$x) + #pull variance estimates from al. plotPCA call
ylab(pca$labels$y) +
# Move y axis
theme(axis.title.y = element_text(margin = margin(t = 0, r = 1,
b = 0, l = 0))) +
# Move x axis
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0,
b = 0, l = 0)))+
# Shrink axis labels down
theme(plot.caption = element_text(vjust = 1),
axis.title = element_text(size = 24),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 30))
}
p <- pca_plot(pca.df)
p
# Make plot
pca_plot <- function(input){
ggplot(data = input, aes(x = PC1, y = PC2))+
geom_point(shape = 21, stroke = 1.5,
aes(fill = as.factor(Inject),
color = as.factor(PMN)),
size = 6) +
theme1 +
#scale_y_continuous(limits = c(-25,25), breaks = seq(-25, 25, by = 10)) +
scale_fill_brewer(palette = "Set1", name = 'Injection') +
#scale_color_brewer(palette = "Set2", name = 'Time', direction = 1) +
scale_color_manual(values=c("black", 'gray'), name = 'PMNs')+
theme(legend.position = "right") +
geom_hline(yintercept = 0,
size = 1, linetype = "dashed", color = "grey70") +
geom_vline(xintercept = 0,
size = 1, linetype = "dashed", color = "grey70") +
coord_fixed(ratio = 1) +
xlab(pca$labels$x) + #pull variance estimates from al. plotPCA call
ylab(pca$labels$y) +
# Move y axis
theme(axis.title.y = element_text(margin = margin(t = 0, r = 1,
b = 0, l = 0))) +
# Move x axis
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0,
b = 0, l = 0)))+
# Shrink axis labels down
theme(plot.caption = element_text(vjust = 1),
axis.title = element_text(size = 24),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 30))
}
p <- pca_plot(pca.df)
p
# save png of plot
#+ save, eval=F
png(filename = here("/img/pca.png"),
width = 900, height = 500)
print(p)
dev.off()
# Save dds object
saveRDS(dds, file = file.path(results.dir, 'dds_no_controls.Rds'))
# Save dds object
saveRDS(dds, file = file.path(results.dir, 'dds_no_controls.rds'))
#' We previously saved the `dds` object in the results folder. Let's load it now:
dds_alt <- readRDS(here('results/DESeq2/dds_no_controls.Rds'))
#' We previously saved the `dds` object in the results folder. Let's load it now:
dds1 <- readRDS(here('results/DESeq2/dds_no_controls.Rds'))
#' ## Transform data using rlog
#+ rlog, cache=T
rld1 <- rlog(dds1, blind = FALSE)
# Set order of injection
unique(colData(rld1)$Inject)
# Load the rlog transformed data
rld1 <- readRDS(here('results/DESeq2/rld_no_controls.rds'))
#' We previously saved the `dds` object in the results folder. Let's load it now:
dds1 <- readRDS(here('results/DESeq2/dds_no_controls.Rds'))
#' ## Transform data using rlog
#+ rlog, cache=T
rld1 <- rlog(dds1, blind = FALSE)
# Save the rlog transformed data
saveRDS(rld1, file = file.path(results.dir, 'rld_no_controls.rds'))
# Load the rlog transformed data
rld1 <- readRDS(here('results/DESeq2/rld_no_controls.rds'))
# Set order of injection
unique(colData(rld1)$Inject)
colData(rld1)$Inject <- colData(rld1)$code_name %>%
gsub(pattern = '\\+PMNs', replacement = '', x = .)
# Set order of injection
unique(colData(rld1)$Inject)
colData(rld1)
txiSamples
# Set order of injection
unique(colData(rld1)$Inject)
pcaplot2 <- function(rld){
# PCA plot (use just only for PC variance estimates)
pca <- plotPCA(rld, intgroup = c('code_name','Inject','hr'))
# Get PCA data
pca.df <- plotPCA(rld, intgroup = c('code_name', 'Inject', 'hr'), returnData = TRUE)
# Make plot
pca_plot <- function(input){
ggplot(data = input, aes(x = PC1, y = PC2))+
geom_hline(yintercept = 0,
size = .5, linetype = "dashed", color = "grey70") +
geom_vline(xintercept = 0,
size = .5, linetype = "dashed", color = "grey70") +
geom_point(shape = 21, stroke = 1.5,
aes(fill = as.factor(Inject),
color = as.factor(hr)),
size = 6) +
theme1 +
#scale_y_continuous(limits = c(-25,25), breaks = seq(-25, 25, by = 10)) +
scale_fill_brewer(palette = "Set1", name = 'Injection') +
#scale_color_brewer(palette = "Set2", name = 'Time', direction = 1) +
scale_color_manual(values=c("gray", "black"), name = 'Time (hr)')+
theme(legend.position = "right") +
coord_fixed(ratio = 1) +
xlab(pca$labels$x) + #pull variance estimates from al. plotPCA call
ylab(pca$labels$y) +
# Move y axis
theme(axis.title.y = element_text(margin = margin(t = 0, r = 0,
b = 0, l = 0))) +
# Move x axis
theme(axis.title.x = element_text(margin = margin(t = 0, r = 0,
b = 0, l = 0)))+
# Shrink axis labels down
theme(plot.caption = element_text(vjust = 1),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
plot.title = element_text(size = 20),
legend.title=element_text(size=16),
legend.text=element_text(size=14))
}
plot <- pca_plot(pca.df)
return(plot)
}
mut.plot <- pcaplot2(rld1)
mut.plot
pcaplot2 <- function(rld){
# PCA plot (use just only for PC variance estimates)
pca <- plotPCA(rld, intgroup = c('code_name','Inject','hr'))
# Get PCA data
pca.df <- plotPCA(rld, intgroup = c('code_name', 'Inject', 'hr'), returnData = TRUE)
# Make plot
pca_plot <- function(input){
ggplot(data = input, aes(x = PC1, y = PC2))+
geom_hline(yintercept = 0,
size = .5, linetype = "dashed", color = "grey70") +
geom_vline(xintercept = 0,
size = .5, linetype = "dashed", color = "grey70") +
geom_point(shape = 21, stroke = 1.5,
aes(fill = as.factor(Inject),
color = as.factor(hr)),
size = 6) +
theme1 +
#scale_y_continuous(limits = c(-25,25), breaks = seq(-25, 25, by = 10)) +
scale_fill_brewer(palette = "Set1", name = 'Injection') +
#scale_color_brewer(palette = "Set2", name = 'Time', direction = 1) +
scale_color_manual(values=c("gray", "black"), name = 'Time (hr)')+
theme(legend.position = "right") +
coord_fixed(ratio = 1) +
xlab(pca$labels$x) + #pull variance estimates from al. plotPCA call
ylab(pca$labels$y) +
# Move y axis
theme(axis.title.y = element_text(margin = margin(t = 0, r = 0,
b = 0, l = 0))) +
# Move x axis
theme(axis.title.x = element_text(margin = margin(t = 0, r = 0,
b = 0, l = 0)))+
# Shrink axis labels down
theme(plot.caption = element_text(vjust = 1),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
plot.title = element_text(size = 20),
legend.title=element_text(size=16),
legend.text=element_text(size=14))
}
plot <- pca_plot(pca.df)
return(plot)
}
mut.plot
# Make separate sample_keys for each subset
alt_key <- dplyr::filter(sample_key, code_name %in% c('PBS','STM','SE',
'PBS+PMNs', 'STM+PMNs', 'SE+PMNs'))
# Vector of samples used in the tximport
txiSamples <- as.vector(unique(alt_key$code_name))
txiSamples
# Set up path to read files into tximport
files <- file.path(dir, alt_key$file_name, 'abundance.h5')
# Add sample IDs to files
names(files) <- alt_key$short_name
#+ tximport, cache=T
txi <- tximport(files, type = "kallisto", tx2gene = tx2gene)
# export abundance counts
write.csv(txi$abundance, file = file.path(results.dir, "no_controls_txi.csv"))
# Create DESeq dataset
dds <- DESeqDataSetFromTximport(txi,
colData = alt_key,
design = ~code_name)
#' Now we'll eliminate all the genes that have zero counts across all conditions.
# Filter out rows with no counts
dds <- dds[rowSums(counts(dds)) > 1, ]
# Account for transcript length
dds <- DESeq2::estimateSizeFactors(dds)
ddscounts <- DESeq2::counts(dds, normalized = TRUE)
# Save output file:
write.csv(ddscounts, file = file.path(results.dir, "no_controls_DESeq2-normalized-counts.csv"))
# Save dds object
saveRDS(dds, file = file.path(results.dir, 'dds_no_controls.rds'))
# Save dds object
saveRDS(dds, file = file.path(results.dir, 'dds_no_controls.rds'))
#' We previously saved the `dds` object in the results folder. Let's load it now:
dds1 <- readRDS(here('results/DESeq2/dds_no_controls.rds'))
#' ## Transform data using rlog
#+ rlog, cache=T
rld1 <- rlog(dds1, blind = FALSE)
# Save the rlog transformed data
saveRDS(rld1, file = file.path(results.dir, 'rld_no_controls.rds'))
# Load the rlog transformed data
rld1 <- readRDS(here('results/DESeq2/rld_no_controls.rds'))
colData(rld1)$Inject <- colData(rld1)$code_name %>%
gsub(pattern = '\\+PMNs', replacement = '', x = .)
# Set order of injection
unique(colData(rld1)$Inject)
# PCA plot (use just only for PC variance estimates)
pca <- plotPCA(rld, intgroup = c('code_name','Inject','PMN'))
# Get PCA data
pca.df <- plotPCA(rld, intgroup = c('code_name', 'Inject', 'PMN'), returnData = TRUE)
pca
# PCA plot (use just only for PC variance estimates)
pca <- plotPCA(rld1, intgroup = c('code_name','Inject','PMN'))
# Get PCA data
pca.df <- plotPCA(rld1, intgroup = c('code_name', 'Inject', 'PMN'), returnData = TRUE)
pca
pca_plot(pca.df)
# Load the rlog transformed data
rld1 <- readRDS(here('results/DESeq2/rld_no_controls.rds'))
colData(rld1)$Inject <- colData(rld1)$code_name %>%
gsub(pattern = '\\+PMNs', replacement = '', x = .)
# PCA plot (use just only for PC variance estimates)
pca <- plotPCA(rld1, intgroup = c('code_name','Inject','PMN'))
# Get PCA data
pca.df <- plotPCA(rld1, intgroup = c('code_name', 'Inject', 'PMN'), returnData = TRUE)
pca
pca_plot(pca.df)
plot_nocontrols <- pca_plot(pca.df)
# save png of plot
#+ eval=F
png(filename = here("/img/no_controls_pca.png"),
width = 900, height = 900)
print(plot_nocontrols)
dev.off()
# Save ggplot objects
dir.create(here('img/ggplot_objects/'))
saveRDS(plot_nocontrols, file = here('img/ggplot_objects/gg_nocontrols_pcaplot.rds'))
# save png of plot
#+ eval=F
png(filename = here("/img/no_controls_pca.png"),
width = 500, height = 500)
print(plot_nocontrols)
dev.off()
# Make plot
pca_plot <- function(input){
ggplot(data = input, aes(x = PC1, y = PC2))+
geom_hline(yintercept = 0,
size = 1, linetype = "dashed", color = "grey70") +
geom_vline(xintercept = 0,
size = 1, linetype = "dashed", color = "grey70") +
geom_point(shape = 21, stroke = 1.5,
aes(fill = as.factor(Inject),
color = as.factor(PMN)),
size = 6) +
theme1 +
#scale_y_continuous(limits = c(-25,25), breaks = seq(-25, 25, by = 10)) +
scale_fill_brewer(palette = "Set1", name = 'Injection') +
#scale_color_brewer(palette = "Set2", name = 'Time', direction = 1) +
scale_color_manual(values=c("black", 'gray'), name = 'PMNs')+
theme(legend.position = "right") +
coord_fixed(ratio = 1) +
xlab(pca$labels$x) + #pull variance estimates from al. plotPCA call
ylab(pca$labels$y) +
# Move y axis
theme(axis.title.y = element_text(margin = margin(t = 0, r = 1,
b = 0, l = 0))) +
# Move x axis
theme(axis.title.x = element_text(margin = margin(t = 10, r = 0,
b = 0, l = 0)))+
# Shrink axis labels down
theme(plot.caption = element_text(vjust = 1),
axis.title = element_text(size = 24),
axis.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
plot.title = element_text(size = 30))
}
p <- pca_plot(pca.df)
p
# save png of plot
#+ eval=F
png(filename = here("/img/no_controls_pca.png"),
width = 500, height = 500)
print(plot_nocontrols)
dev.off()
plot_nocontrols <- pca_plot(pca.df)
# save png of plot
#+ eval=F
png(filename = here("/img/no_controls_pca.png"),
width = 500, height = 500)
print(plot_nocontrols)
dev.off()
# save png of plot
#+ eval=F
png(filename = here("/img/no_controls_pca.png"),
width = 500, height = 400)
print(plot_nocontrols)
dev.off()
